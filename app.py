# app.py

import streamlit as st
import numpy as np
import os
import uuid
# import requests # Kh√¥ng c·∫ßn import tr·ª±c ti·∫øp ·ªü ƒë√¢y n·ªØa n·∫øu st.image x·ª≠ l√Ω URL

# Import c√°c h√†m v√† h·∫±ng s·ªë
from config import MODEL_PATH, CLASS_NAMES, CONFIDENCE_THRESHOLD, COLLECTED_DATA_DIR, CLASS_TO_SCIENTIFIC
from utils import (load_keras_model, preprocess_image, search_taxa_autocomplete,
                   get_inat_image_urls, save_feedback_image)

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="Nh·∫≠n di·ªán C√¢y Ki·ªÉng L√° VN",
    page_icon="üåø",
    layout="centered",
    initial_sidebar_state="expanded"
)

# --- Kh·ªüi t·∫°o Session State ---
default_states = {
    'file_identifier': None,
    'widget_key_prefix': None,
    'image_data': None,
    'prediction_done': False,
    'predicted_class': None,
    'confidence': 0.0,
    'user_feedback': None,
    'inat_search_term': "",
    'inat_suggestions': [],
    'selected_inat_suggestion': None,
    'inat_image_urls': [],
    'final_label_confirmed': None,
    'image_saved': False,
    'last_search_term': "" # Th√™m state ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c
}
if 'original_filename' not in st.session_state: st.session_state.original_filename = None
for key, default_value in default_states.items():
    if key not in st.session_state:
        st.session_state[key] = default_value

# --- T·∫£i Model ---
model = load_keras_model(MODEL_PATH)

# --- Sidebar ---
st.sidebar.header("T·∫£i ·∫£nh l√™n")
uploaded_file = st.sidebar.file_uploader(
    "Ch·ªçn m·ªôt file ·∫£nh (JPG, PNG, GIF)",
    type=["jpg", "jpeg", "png", "gif"],
    key="file_uploader" # Key c·ªë ƒë·ªãnh
)

# --- Logic ch√≠nh ---
st.title("üåø Nh·∫≠n di·ªán C√¢y Ki·ªÉng L√°")

# X·ª≠ l√Ω khi c√≥ file m·ªõi ƒë∆∞·ª£c t·∫£i l√™n
if uploaded_file is not None:
    current_file_id = f"{uploaded_file.name}_{uploaded_file.size}"
    # N·∫øu l√† file m·ªõi, reset to√†n b·ªô tr·∫°ng th√°i v√† t·∫°o key m·ªõi
    if st.session_state.file_identifier != current_file_id:
        print(f"New file uploaded: {uploaded_file.name}")
        st.session_state.file_identifier = current_file_id
        st.session_state.widget_key_prefix = f"file_{uuid.uuid4().hex[:10]}"
        st.session_state.image_data = uploaded_file.getvalue()
        # Reset t·∫•t c·∫£ c√°c tr·∫°ng th√°i li√™n quan ƒë·∫øn x·ª≠ l√Ω file c≈©
        for key in default_states:
            if key not in ['file_identifier', 'widget_key_prefix', 'image_data']: # Gi·ªØ l·∫°i 3 c√°i n√†y
                st.session_state[key] = default_states[key]
        # ƒê·∫∑t l·∫°i last_search_term cho key m·ªõi
        st.session_state[f"last_search_{st.session_state.widget_key_prefix}"] = ""


else:
    # Reset n·∫øu kh√¥ng c√≥ file
    if st.session_state.file_identifier is not None:
        print("No file uploaded, resetting state.")
        for key in default_states:
            st.session_state[key] = default_states[key]
    st.info('‚¨ÜÔ∏è H√£y t·∫£i l√™n m·ªôt h√¨nh ·∫£nh ·ªü thanh b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu!')


# --- Hi·ªÉn th·ªã v√† x·ª≠ l√Ω khi c√≥ file v√† model ƒë√£ t·∫£i ---
if st.session_state.image_data is not None and model is not None:
    key_prefix = st.session_state.widget_key_prefix # D√πng key prefix ƒë√£ l∆∞u

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc
    st.image(st.session_state.image_data, caption='·∫¢nh b·∫°n ƒë√£ t·∫£i l√™n.', use_container_width=True)

    # --- N√∫t Ph√¢n lo·∫°i ---
    if not st.session_state.prediction_done:
        if st.button('Ph√¢n lo·∫°i c√¢y n√†y!', key=f"classify_{key_prefix}"):
            with st.spinner('ƒêang ph√¢n t√≠ch h√¨nh ·∫£nh...'):
                processed_image = preprocess_image(st.session_state.image_data)
                if processed_image is not None:
                    try:
                        prediction = model.predict(processed_image)
                        pred_index = np.argmax(prediction[0])
                        pred_conf = np.max(prediction[0]) * 100

                        st.session_state.confidence = pred_conf
                        if 0 <= pred_index < len(CLASS_NAMES):
                            st.session_state.predicted_class = CLASS_NAMES[pred_index]
                        else:
                            st.session_state.predicted_class = "L·ªõp kh√¥ng x√°c ƒë·ªãnh"
                        st.session_state.prediction_done = True
                        st.rerun() # Ch·∫°y l·∫°i ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
                    except Exception as e:
                        st.error(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
                        print(f"Prediction error: {e}")
                else:
                    # L·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong preprocess_image
                    pass

    # --- Kh·ªëi ch√≠nh x·ª≠ l√Ω SAU KHI ƒê√É PH√ÇN LO·∫†I v√† CH∆ØA L∆ØU ---
    if st.session_state.prediction_done and not st.session_state.image_saved:
        st.markdown("---") # Ph√¢n c√°ch v·ªõi ·∫£nh
        pred_class = st.session_state.predicted_class
        pred_conf = st.session_state.confidence

        # --- ƒê·ªãnh nghƒ©a bi·∫øn ƒëi·ªÅu ki·ªán ---
        is_confident_prediction = pred_conf >= CONFIDENCE_THRESHOLD and pred_class in CLASS_NAMES
        is_known_class_prediction = pred_class in CLASS_NAMES

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
        if is_confident_prediction:
            st.success(f"**K·∫øt qu·∫£: C√≥ v·∫ª l√† c√¢y {pred_class}!** (ƒê·ªô ch·∫Øc ch·∫Øn: {pred_conf:.1f}%)")
        elif is_known_class_prediction:
             st.warning(f"**Hmm, kh√¥ng ch·∫Øc ch·∫Øn l·∫Øm.** D·ª± ƒëo√°n g·∫ßn nh·∫•t: **{pred_class}** (ƒê·ªô ch·∫Øc ch·∫Øn: {pred_conf:.1f}%)")
        else:
            st.error("**Kh√¥ng th·ªÉ nh·∫≠n di·ªán ch·∫Øc ch·∫Øn.**")

        # --- Logic H·ªèi Feedback M·ªõi ---
        st.markdown("---") # Ph√¢n c√°ch tr∆∞·ªõc c√¢u h·ªèi feedback
        if is_confident_prediction:
            st.write(f"**H·ªá th·ªëng d·ª± ƒëo√°n l√† {pred_class}. Th√¥ng tin n√†y c√≥ ch√≠nh x√°c kh√¥ng?**")
            feedback_cols = st.columns(2)
            with feedback_cols[0]:
                if st.button("‚úÖ ƒê√∫ng r·ªìi", key=f"feedback_correct_{key_prefix}"):
                    st.session_state.user_feedback = 'Correct_Confident'
                    scientific_label_to_save = CLASS_TO_SCIENTIFIC.get(pred_class)

                    if scientific_label_to_save:
                        # G·ªçi h√†m l∆∞u ·∫£nh ngay l·∫≠p t·ª©c
                        print(f"APP: Saving correctly identified image as {scientific_label_to_save}") # DEBUG
                        saved_ok, saved_label_dir = save_feedback_image(
                            st.session_state.image_data,
                            st.session_state.original_filename,
                            scientific_label_to_save, # <<< D√πng t√™n khoa h·ªçc
                            COLLECTED_DATA_DIR
                        )
                        if saved_ok:
                            # Kh√¥ng c·∫ßn rerun ngay, ch·ªâ c·∫ßn c·∫≠p nh·∫≠t state v√† hi·ªÉn th·ªã th√¥ng b√°o
                            st.session_state.image_saved = True
                            # st.rerun() # C√≥ th·ªÉ kh√¥ng c·∫ßn rerun ·ªü ƒë√¢y n·ªØa
                        # else: l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong save_feedback_image
                    else:
                        print(f"APP: Could not find scientific name mapping for {pred_class}")
                        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y t√™n khoa h·ªçc t∆∞∆°ng ·ª©ng cho '{pred_class}' ƒë·ªÉ l∆∞u.")

                    st.rerun()
            with feedback_cols[1]:
                 if st.button("‚ùå Sai r·ªìi", key=f"feedback_incorrect_{key_prefix}"):
                    st.session_state.user_feedback = 'Incorrect_Confident'
                    # Reset t√¨m ki·∫øm khi b·∫•m sai
                    st.session_state.inat_search_term = ""
                    st.session_state.selected_inat_suggestion = None
                    st.session_state.inat_image_urls = []
                    st.rerun()
        else: # Tr∆∞·ªùng h·ª£p kh√¥ng ch·∫Øc ch·∫Øn ho·∫∑c l·ªõp l·∫°
            st.write(f"**H·ªá th·ªëng kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ ·∫£nh n√†y. B·∫°n c√≥ th·ªÉ gi√∫p x√°c ƒë·ªãnh kh√¥ng?**")
            feedback_cols = st.columns(2)
            with feedback_cols[0]:
                if is_known_class_prediction: # Ch·ªâ hi·ªán n√∫t n√†y n·∫øu bi·∫øt l·ªõp d·ª± ƒëo√°n g·∫ßn nh·∫•t
                    if st.button(f"‚úÖ ƒê√∫ng, ƒë√≥ l√† {pred_class}", key=f"feedback_confirm_unsure_{key_prefix}"):
                        st.session_state.user_feedback = 'Confirmed_Unsure'
                        st.session_state.final_label_confirmed = pred_class # X√°c nh·∫≠n nh√£n d·ª± ƒëo√°n ban ƒë·∫ßu l√† ƒë√∫ng
                        st.rerun()
                # else: C·ªôt n√†y tr·ªëng n·∫øu kh√¥ng bi·∫øt l·ªõp
            with feedback_cols[1]:
                 if st.button("üîç T√¨m lo·∫°i c√¢y kh√°c", key=f"feedback_search_unsure_{key_prefix}"):
                    st.session_state.user_feedback = 'Search_Unsure'
                    # Reset t√¨m ki·∫øm
                    st.session_state.inat_search_term = ""
                    st.session_state.selected_inat_suggestion = None
                    st.session_state.inat_image_urls = []
                    st.rerun()

        # --- X·ª≠ l√Ω d·ª±a tr√™n Feedback ---
        # Ch·ªâ hi·ªÉn th·ªã c√°c ph·∫ßn n√†y n·∫øu user_feedback ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
        if st.session_state.user_feedback == 'Correct_Confident':
            if not st.session_state.image_saved:
             st.success("üéâ C·∫£m ∆°n b·∫°n ƒë√£ x√°c nh·∫≠n!")

        elif st.session_state.user_feedback == 'Confirmed_Unsure':
            confirmed_short_label = st.session_state.final_label_confirmed
            st.success(f"üéâ C·∫£m ∆°n b·∫°n ƒë√£ x√°c nh·∫≠n l√† **{st.session_state.final_label_confirmed}**!")

            if not st.session_state.image_saved:
                scientific_label_to_save = CLASS_TO_SCIENTIFIC.get(confirmed_short_label)
                if scientific_label_to_save:
                    print(f"APP: Saving unsure but confirmed image as {scientific_label_to_save}") # DEBUG
                    saved_ok, saved_label_dir = save_feedback_image(
                        st.session_state.image_data,             # D·ªØ li·ªáu ·∫£nh
                        st.session_state.original_filename,    # T√™n file g·ªëc
                        scientific_label_to_save, # <<< D√πng t√™n khoa h·ªçc ƒë√£ tra c·ª©u
                        COLLECTED_DATA_DIR
                    )
                    if saved_ok:
                            st.info(f"ƒê√£ l∆∞u ·∫£nh v√†o th∆∞ m·ª•c '{saved_label_dir}'.")
                            st.session_state.image_saved = True
                            st.rerun() # Rerun ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√£ l∆∞u
                else:
                    # Tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y mapping (kh√¥ng n√™n x·∫£y ra n·∫øu config ƒë√∫ng)
                    print(f"APP: Could not find scientific name mapping for confirmed label '{confirmed_short_label}'")
                    st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y t√™n khoa h·ªçc t∆∞∆°ng ·ª©ng cho '{confirmed_short_label}' ƒë·ªÉ l∆∞u.")
                    # C√≥ th·ªÉ v·∫´n rerun ƒë·ªÉ x√≥a c√°c n√∫t b·∫•m
                    st.rerun()

            # # L∆∞u ·∫£nh v·ªõi nh√£n ƒë√£ x√°c nh·∫≠n
            # if not st.session_state.image_saved: # Ch·ªâ l∆∞u 1 l·∫ßn
            #      scientific_label_to_save = CLASS_TO_SCIENTIFIC.get(confirmed_short_label)
            #      # S·ª≠ d·ª•ng image_data t·ª´ session state ƒë·ªÉ l∆∞u
            #      saved_ok, saved_label_dir = save_feedback_image(
            #          st.session_state.image_data,             # D·ªØ li·ªáu ·∫£nh
            #          st.session_state.original_filename,    # T√™n file g·ªëc
            #          st.session_state.final_label_confirmed, # Nh√£n ƒë√£ x√°c nh·∫≠n
            #          COLLECTED_DATA_DIR
            #      )
            #      if saved_ok:
            #          st.info(f"ƒê√£ l∆∞u ·∫£nh v√†o th∆∞ m·ª•c '{saved_label_dir}' ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch·∫Øc ch·∫Øn cho model sau n√†y.")
            #          st.session_state.image_saved = True
            #          st.rerun() # Rerun ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√£ l∆∞u

        elif st.session_state.user_feedback in ['Incorrect_Confident', 'Search_Unsure']:
            # Hi·ªÉn th·ªã giao di·ªán t√¨m ki·∫øm
            st.markdown("---")
            st.subheader("T√¨m v√† x√°c nh·∫≠n lo√†i c√¢y:")
            st.write("H√£y th·ª≠ t√¨m t√™n c√¢y b·∫°n nghƒ© ƒë·∫øn:")

            # √î t√¨m ki·∫øm
            search_term = st.text_input(
                "Nh·∫≠p t√™n c√¢y (t√™n khoa h·ªçc b·∫±ng ti·∫øng Anh)",
                value=st.session_state.inat_search_term,
                key=f"search_input_{key_prefix}"
            )
            # C·∫≠p nh·∫≠t state search term n·∫øu c√≥ thay ƒë·ªïi
            if search_term != st.session_state.inat_search_term:
                st.session_state.inat_search_term = search_term
                # Reset g·ª£i √Ω khi g√µ m·ªõi ƒë·ªÉ tr√°nh hi·ªÉn th·ªã g·ª£i √Ω c≈©
                st.session_state.inat_suggestions = []
                # Kh√¥ng c·∫ßn rerun ·ªü ƒë√¢y, rerun s·∫Ω x·∫£y ra khi ki·ªÉm tra ƒë·ªô d√†i

            # G·ªçi API autocomplete n·∫øu c√≥ t·ª´ kh√≥a m·ªõi v√† ƒë·ªß d√†i
            last_search_key = f"last_search_{key_prefix}"
            if search_term != st.session_state.get(last_search_key, ""):
                 if len(search_term) >= 3:
                     with st.spinner("ƒêang t√¨m g·ª£i √Ω..."):
                          st.session_state.inat_suggestions = search_taxa_autocomplete(search_term)
                 else:
                     # X√≥a g·ª£i √Ω n·∫øu t·ª´ kh√≥a qu√° ng·∫Øn
                     if len(search_term) < 3 and st.session_state.inat_suggestions:
                         st.session_state.inat_suggestions = []
                 st.session_state[last_search_key] = search_term
                 # Ch·ªâ rerun n·∫øu th·ª±c s·ª± c√≥ thay ƒë·ªïi g·ª£i √Ω ho·∫∑c c·∫ßn x√≥a g·ª£i √Ω
                 st.rerun()

            # Hi·ªÉn th·ªã g·ª£i √Ω d·∫°ng n√∫t b·∫•m
            if st.session_state.inat_suggestions:
                st.write("G·ª£i √Ω:")
                num_suggestions = len(st.session_state.inat_suggestions)
                cols_per_row = 3
                num_rows = (num_suggestions + cols_per_row - 1) // cols_per_row

                suggestion_list = st.session_state.inat_suggestions
                idx = 0
                for r in range(num_rows):
                    cols = st.columns(cols_per_row)
                    for c in range(cols_per_row):
                        if idx < num_suggestions:
                            suggestion = suggestion_list[idx]
                            button_label = suggestion['formatted_display']
                            # Gi·ªõi h·∫°n ƒë·ªô d√†i nh√£n n√∫t n·∫øu qu√° d√†i
                            max_label_len = 35
                            if len(button_label) > max_label_len:
                                button_label = button_label[:max_label_len-3] + "..."

                            if cols[c].button(button_label, key=f"suggestion_button_{suggestion['id']}_{key_prefix}", help=suggestion['formatted_display']):
                                # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ch·ªçn g·ª£i √Ω kh√°c v·ªõi c√°i ƒëang ch·ªçn
                                current_selection_id = st.session_state.selected_inat_suggestion.get('id') if st.session_state.selected_inat_suggestion else None
                                if current_selection_id != suggestion['id']:
                                    st.session_state.selected_inat_suggestion = suggestion
                                    st.session_state.inat_image_urls = [] # Reset ·∫£nh c≈©
                                    # C·∫≠p nh·∫≠t √¥ search v·ªõi t√™n ƒë∆∞·ª£c ch·ªçn (t√πy ch·ªçn UX)
                                    st.session_state.inat_search_term = suggestion['display_name']
                                    st.session_state[last_search_key] = suggestion['display_name'] # C·∫≠p nh·∫≠t last search ƒë·ªÉ tr√°nh g·ªçi API l·∫°i
                                    st.rerun()
                            idx += 1


            # Hi·ªÉn th·ªã ·∫£nh tham kh·∫£o n·∫øu ƒë√£ ch·ªçn 1 g·ª£i √Ω
            if st.session_state.selected_inat_suggestion:
                 selected_sug = st.session_state.selected_inat_suggestion
                 st.markdown("---") # Ph√¢n c√°ch v·ªõi c√°c n√∫t g·ª£i √Ω
                 st.write(f"B·∫°n ƒëang xem: **{selected_sug['display_name']} ({selected_sug['scientific_name']})**")

                 # T·∫£i ·∫£nh n·∫øu ch∆∞a c√≥
                 if not st.session_state.inat_image_urls:
                     print(f"APP: Fetching images for {selected_sug['id']}")
                     with st.spinner("ƒêang t·∫£i ·∫£nh tham kh·∫£o..."):
                          st.session_state.inat_image_urls = get_inat_image_urls(selected_sug.get('id'), count=10)
                          print(f"APP: Got {len(st.session_state.inat_image_urls)} image URLs")

                 # Hi·ªÉn th·ªã ·∫£nh
                 if st.session_state.inat_image_urls:
                     st.write("·∫¢nh tham kh·∫£o (t·ª´ iNaturalist.org):")
                     cols = st.columns(5)
                     for i, img_url in enumerate(st.session_state.inat_image_urls):
                         with cols[i % 5]:
                             try:
                                 st.image(img_url, width=100) # ƒê·ªÉ Streamlit t·ª± x·ª≠ l√Ω URL
                             except Exception as img_e:
                                 print(f"APP: Error displaying image {img_url}: {img_e}")
                                 # st.caption("L·ªói ·∫£nh")
                 else:
                      print("APP: No image URLs to display.")
                      st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh tham kh·∫£o cho lo√†i n√†y.")

                 # N√∫t x√°c nh·∫≠n cu·ªëi c√πng
                 st.markdown("---")
                 confirm_button_label = f"‚úÖ X√°c nh·∫≠n ƒë√¢y l√† c√¢y: {selected_sug['display_name']}"
                 if len(confirm_button_label) > 50: # R√∫t g·ªçn n·∫øu qu√° d√†i
                     confirm_button_label = f"‚úÖ X√°c nh·∫≠n: {selected_sug['display_name'][:30]}..."

                 if st.button(confirm_button_label, key=f"confirm_label_{key_prefix}", help=f"X√°c nh·∫≠n l√† {selected_sug['display_name']} ({selected_sug['scientific_name']})"):
                      final_label_to_save = selected_sug['scientific_name'] # D√πng t√™n khoa h·ªçc ƒë·ªÉ l∆∞u
                      # L∆∞u ·∫£nh d√πng image_data t·ª´ session state
                      saved_ok, saved_label_dir = save_feedback_image(
                          st.session_state.image_data,          # D·ªØ li·ªáu ·∫£nh
                          st.session_state.original_filename, # T√™n file g·ªëc
                          final_label_to_save,              # Nh√£n cu·ªëi c√πng
                          COLLECTED_DATA_DIR
                      )
                      if saved_ok:
                          st.success(f"ƒê√£ l∆∞u ·∫£nh v√†o th∆∞ m·ª•c '{saved_label_dir}' ƒë·ªÉ hu·∫•n luy·ªán sau. C·∫£m ∆°n b·∫°n!")
                          st.balloons()
                          st.session_state.image_saved = True
                          st.rerun() # Ch·∫°y l·∫°i ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i cu·ªëi
            


# --- Hi·ªÉn th·ªã khi ƒë√£ l∆∞u ·∫£nh th√†nh c√¥ng ---
# Kh·ªëi n√†y ch·ªâ ch·∫°y n·∫øu prediction_done=True V√Ä image_saved=True
if st.session_state.image_data is not None and st.session_state.prediction_done and st.session_state.image_saved:
     st.markdown("---") # Th√™m ph√¢n c√°ch
     st.success("ƒê√£ l∆∞u ph·∫£n h·ªìi c·ªßa b·∫°n. C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p!")
     st.info("B·∫°n c√≥ th·ªÉ t·∫£i l√™n ·∫£nh kh√°c ·ªü thanh b√™n tr√°i.")

# --- Ch√¢n trang ---
st.markdown("---")
st.markdown("X√¢y d·ª±ng v·ªõi Streamlit & TensorFlow/Keras. D·ªØ li·ªáu tham kh·∫£o t·ª´ iNaturalist.org.")